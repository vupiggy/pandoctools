ifndef PUBDIR
  PUBDIR=./
endif

all:	html pdf
pdf:	mdpdf texpdf
html:	$(foreach target, $(MDHTMLTARGETS), $(PUBDIR)/$(target))
mdpdf:	$(foreach target, $(MDPDFTARGETS),  $(PUBDIR)/$(target))
texpdf:	$(TEXPDFTARGETS)

.PHONY: all pdf html mdpdf texpdf

ifndef DOCTOOLS
  DOCTOOLS=$(HOME)/Projects/pandoctools
endif

ifndef STYLEDIR
  STYLEDIR	=	$(DOCTOOLS)/styles
endif

ifndef HTMLSTYLEDIR
  HTMLSTYLEDIR	=	$(STYLEDIR)
endif

ifndef TEXFONTPATH
  TEXFONTPATH	=	$(DOCTOOLS)/fonts
endif

TEXMDPREAMBLES	=	$(wildcard $(STYLEDIR)/preamble_*.tex)
TEXPREAMBLES	=	$(wildcard $(STYLEDIR)/preamble*.tex)

ifndef TEXTEMPLATE
  TEXTEMPLATE	=	$(STYLEDIR)/md2pdf_template.tex
endif

HTMLSTYLES	=	$(wildcard $(HTMLSTYLEDIR)/*.css)
HTML5TEMPLATE	=	$(STYLEDIR)/tufte.html5
HTMLCMDCSS	=	$(foreach css, $(HTMLSTYLES), --css $(css))

clean:
	@[ -d Figures ] && make -C Figures/ clean DOCTOOLS=$(DOCTOOLS)
	@echo "RM pdf html"
	@rm -f $(PUBDIR)/*.{pdf,html} *.d

distclean:
	@[ -d Figures ] && make -C Figures/ distclean DOCTOOLS=$(DOCTOOLS)
	@echo "RM html, pdf, figures and all intermediates"
	@rm -f $(PUBDIR)/*.{pdf.html} *.aux *.log *.out *.toc *.xwm *.d

.PHONY: clean distclean

ifeq ($(DEBUG), y)
  OUTPUT=--verbose
else
  OUTPUT=>/dev/null 2>&1
endif

### ------------------------ LaTeX documents ------------------------ ###

### Dependency ###
AWK=awk
input_tex=									\
        $(shell [ "$1" != "" ] && $(AWK) '/^(\\input|\\include)\{.*\}$$/	\
                {								\
                    input=gensub(/.*{(.*)}.*/, "\\1", "g");			\
                    if (index(input, ".tex") == 0) {				\
                        if (index(input, "\\") != 1) {				\
                            printf("%s.tex ", input);				\
                        }							\
                    } else {							\
                        if (index(input, "\\") != 1) {				\
                            printf("%s ", input);				\
                        }							\
                    }								\
                }' $1)

master_tex=$(TEXPDFTARGETS:.pdf=)

tex := $(call input_tex,$(master_tex))
tex += $(call input_tex,$(tex))
%.d: %.tex
	@echo "Generate depenent inputs"
	@echo "$(<:.tex=.tex.pdf) $(<:.tex=.d): $< $(tex) $(src)" >$@

include $(master_tex:.tex=.d)

#%.tex.pdf: %.tex $(TEXPARTS) $(TEXPREAMBLES)
%.tex.pdf: %.tex $(TEXPREAMBLES)
	@echo "TeXing" $< "3 times..."
	@set -e; \
	 for i in {1..3}; do echo "TeXing $$i";							\
		TEXINPUTS=$${TEXINPUTS}:$(STYLEDIR)						\
		xelatex -halt-on-error -shell-escape -interaction=batchmode -jobname=$(@:.pdf=) \
		"$(EXTRATEXARGS) \input{$<}" $(OUTPUT)						\
		|| (echo "Failed...exit"; exit 1);						\
	 done

### ------------------------ Markdown(Pandoc) documents ------------- ###
ifndef FIGURESDIR
  FIGURESDIR=Figures
endif

# Makefile that includes this file must define FIGURES_PDF, MDPARTS, and <target>_mdparts variables!
FIGURESRC=$(foreach fig, $(FIGURES_PDF), $(FIGURESDIR)/src/$(fig:.pdf=.tikz))
LISTINGS=$(foreach md, $($*_mdparts), $(shell awk -F':' '/^[[:space:]]+"path"[[:space:]]*:.*.{c,h,cpp,hpp,go,py}/ {gsub(/",*/, "", $$2) ; print $$2}' $(md) | uniq))

$(PUBDIR)/%.md.html: $$($$*_mdparts) $$(LISTINGS) $(HTMLSTYLES) $(FIGURESRC)
	@if [ -d $(FIGURESDIR) -a -f $(FIGURESDIR)/Makefile ]; 			\
	 then 									\
		printf "%-12s %s\n" "Generating" "figurs";			\
		make -C $(FIGURESDIR) figures 					\
			TEXINPUTS="$(TEXINPUTS):$(STYLEDIR)" 			\
			DOCTOOLS=$(DOCTOOLS)					\
			DEBUG=$(DEBUG)						\
			--no-print-directory;					\
	 fi
	@printf "%-12s %s\n" "Generating" $@
	@pandoc $(EXTRAARGS)							\
		--katex=https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/		\
		--toc --toc-depth=1						\
		--wrap=preserve							\
		--listings							\
		--section-divs							\
		--from markdown+fenced_divs					\
		--from markdown+pipe_tables+table_captions			\
		--from markdown+tex_math_single_backslash			\
		--from markdown+definition_lists				\
		--to html5  --template=$(HTML5TEMPLATE)				\
		$(HTMLCMDCSS)							\
		--metadata date="`date`"					\
		--output $@ $($*_mdparts) $(OUTPUT)

$(PUBDIR)/%.md.pdf: $$($$*_mdparts) $$(LISTINGS) $(TEXMDPREAMBLES) $(FIGURESRC)
	@if [ -d $(FIGURESDIR) -a -f $(FIGURESDIR)/Makefile ]; 			\
	 then 									\
		printf "%-12s %s\n" "Generating" "figurs";			\
		make -C $(FIGURESDIR) figures 					\
			TEXINPUTS="$(TEXINPUTS):$(STYLEDIR)" 			\
			DOCTOOLS=$(DOCTOOLS)					\
			DEBUG=$(DEBUG)						\
			--no-print-directory;					\
	 fi
	@printf "%-12s %s\n" "Generating" $@
	@TEXINPUTS="$(TEXINPUTS):$(STYLEDIR)"					\
		pandoc $(EXTRAARGS)						\
		--pdf-engine=xelatex						\
		--pdf-engine-opt="-shell-escape"				\
		--from markdown+tex_math_single_backslash			\
		--from markdown-markdown_in_html_blocks-native_divs		\
		--from markdown+pipe_tables+table_captions			\
		-V fontpath="$(TEXFONTPATH)/"					\
		$(RESOURCEPATH)							\
		--template=$(TEXTEMPLATE) $($*_mdparts) -o $@ $(OUTPUT)

### Figures(in TikZ)
%.pdf: src/%.tikz
	@printf "%-12s %s\n" "Tikzing " $<
	@tikzfile=$<; texfile=$${tikzfile%%.tikz}.tex; tikzfile=`basename $<`;		\
	 printf "\\\documentclass[tikz, border=10pt]{standalone}\n\n"	>$${texfile};	\
	 printf "\\\usetikzlibrary{calc,quotes,angles,arrows}\n"	>>$${texfile};	\
	 printf "\\\usepackage{amsthm}\n"				>>$${texfile};	\
	 printf "\\\usepackage{tkz-euclide}\n"				>>$${texfile};	\
	 printf "\\\usetkzobj{all}\n"					>>$${texfile};	\
	 printf "\\\usepackage[scaled]{helvet}\n"			>>$${texfile};	\
	 printf "\\\renewcommand{\\\ttdefault}{lmtt}\n"			>>$${texfile};	\
	 printf "\\\usepackage[T1]{fontenc}\n"				>>$${texfile};	\
	 printf "\\\usepackage{xcolor}\n"				>>$${texfile};	\
	 printf "\\\begin{document}\n"					>>$${texfile};	\
	 printf "\\\input{$${tikzfile}}\n"				>>$${texfile};	\
	 printf "\\\end{document}\n\n"					>>$${texfile};	\
	 TEXINPUTS=$(TEXINPUTS):$(TEXEXTRAINPUTS)					\
	 lualatex -interaction=nonstopmode -output-directory=./ $${texfile} $(OUTPUT)

%.svg: %.pdf
	@printf "%-12s %-20s to SVG\n" "Exporting" "$^"
	@pdf2svg $< $@
